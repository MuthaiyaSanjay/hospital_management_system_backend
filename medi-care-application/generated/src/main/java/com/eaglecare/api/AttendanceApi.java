/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.medicare.api;

import com.medicare.model.CheckInCheckOut;
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import com.medicare.model.HolidayConfiguration;
import com.medicare.model.LeaveAllocation;
import com.medicare.model.LeaveApplication;
import com.medicare.model.LeaveApproval;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-12T00:43:21.532621800+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "Attendance", description = "Operations about Attendance")
public interface AttendanceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/api/attendance/leave-applications : Apply for leave
     * Apply for leave
     *
     * @param leaveApplication  (optional)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "applyLeave",
        summary = "Apply for leave",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/attendance/leave-applications",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _applyLeave(
        @Parameter(name = "LeaveApplication", description = "") @Valid @RequestBody(required = false) LeaveApplication leaveApplication
    ) {
        return applyLeave(leaveApplication);
    }

    // Override this method
    default  ResponseEntity<Void> applyLeave(LeaveApplication leaveApplication) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/api/attendance/leave-approvals/{leaveApplicationId} : Approve leave
     * Approve leave
     *
     * @param leaveApplicationId  (required)
     * @param leaveApproval  (optional)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "approveLeave",
        summary = "Approve leave",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/attendance/leave-approvals/{leaveApplicationId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _approveLeave(
        @Parameter(name = "leaveApplicationId", description = "", required = true) @PathVariable("leaveApplicationId") Integer leaveApplicationId,
        @Parameter(name = "LeaveApproval", description = "") @Valid @RequestBody(required = false) LeaveApproval leaveApproval
    ) {
        return approveLeave(leaveApplicationId, leaveApproval);
    }

    // Override this method
    default  ResponseEntity<Void> approveLeave(Integer leaveApplicationId, LeaveApproval leaveApproval) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/api/attendance/checkin/{userId} : Check-in for the day
     * Check-in for the day
     *
     * @param userId  (required)
     * @return Check-in recorded (status code 200)
     */
    @Operation(
        operationId = "checkIn",
        summary = "Check-in for the day",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Check-in recorded", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CheckInCheckOut.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/attendance/checkin/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<CheckInCheckOut> _checkIn(
        @Parameter(name = "userId", description = "", required = true) @PathVariable("userId") Integer userId
    ) {
        return checkIn(userId);
    }

    // Override this method
    default  ResponseEntity<CheckInCheckOut> checkIn(Integer userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"check_in_time\" : \"check_in_time\", \"check_out_time\" : \"check_out_time\", \"id\" : 0, \"userId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/api/attendance/checkout/{userId} : Check-out for the day
     * Check-out for the day
     *
     * @param userId  (required)
     * @return Check-out recorded (status code 200)
     */
    @Operation(
        operationId = "checkOut",
        summary = "Check-out for the day",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Check-out recorded", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CheckInCheckOut.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/attendance/checkout/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<CheckInCheckOut> _checkOut(
        @Parameter(name = "userId", description = "", required = true) @PathVariable("userId") Integer userId
    ) {
        return checkOut(userId);
    }

    // Override this method
    default  ResponseEntity<CheckInCheckOut> checkOut(Integer userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"check_in_time\" : \"check_in_time\", \"check_out_time\" : \"check_out_time\", \"id\" : 0, \"userId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/api/attendance/holidays : Create a holiday
     * Create holdiay details
     *
     * @param holidayConfiguration  (optional)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "createHolidayDetails",
        summary = "Create a holiday",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/attendance/holidays",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _createHolidayDetails(
        @Parameter(name = "HolidayConfiguration", description = "") @Valid @RequestBody(required = false) HolidayConfiguration holidayConfiguration
    ) {
        return createHolidayDetails(holidayConfiguration);
    }

    // Override this method
    default  ResponseEntity<Void> createHolidayDetails(HolidayConfiguration holidayConfiguration) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/api/attendance/leave-allocations/user : Allocate leave
     * Allocate leave for users
     *
     * @param leaveAllocation  (optional)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "createLeaveAllcoationForUsers",
        summary = "Allocate leave",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/attendance/leave-allocations/user",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _createLeaveAllcoationForUsers(
        @Parameter(name = "LeaveAllocation", description = "") @Valid @RequestBody(required = false) LeaveAllocation leaveAllocation
    ) {
        return createLeaveAllcoationForUsers(leaveAllocation);
    }

    // Override this method
    default  ResponseEntity<Void> createLeaveAllcoationForUsers(LeaveAllocation leaveAllocation) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/attendance/{userId} : Get check-in and check-out details
     * Get check-in and check-out details
     *
     * @param userId  (required)
     * @param date  (required)
     * @return Check-in and check-out details (status code 200)
     */
    @Operation(
        operationId = "getCheckInAndOutDetails",
        summary = "Get check-in and check-out details",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Check-in and check-out details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CheckInCheckOut.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/attendance/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<CheckInCheckOut> _getCheckInAndOutDetails(
        @Parameter(name = "userId", description = "", required = true) @PathVariable("userId") Integer userId,
        @NotNull @Parameter(name = "date", description = "", required = true) @Valid @RequestParam(value = "date", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date date
    ) {
        return getCheckInAndOutDetails(userId, date);
    }

    // Override this method
    default  ResponseEntity<CheckInCheckOut> getCheckInAndOutDetails(Integer userId, Date date) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"check_in_time\" : \"check_in_time\", \"check_out_time\" : \"check_out_time\", \"id\" : 0, \"userId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/attendance/holidays : Get all holidays
     * Get holdiay details
     *
     * @return A list of holidays (status code 200)
     */
    @Operation(
        operationId = "getHolidayDetails",
        summary = "Get all holidays",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of holidays", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HolidayConfiguration.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/attendance/holidays",
        produces = { "application/json" }
    )
    default ResponseEntity<List<HolidayConfiguration>> _getHolidayDetails(
        
    ) {
        return getHolidayDetails();
    }

    // Override this method
    default  ResponseEntity<List<HolidayConfiguration>> getHolidayDetails() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/attendance/leave-allocations/user : Get leave allocation for a user
     * Appoinment details
     *
     * @param id  (required)
     * @return leave allocation of user (status code 200)
     */
    @Operation(
        operationId = "getLeaveAllicationByUser",
        summary = "Get leave allocation for a user",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "leave allocation of user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LeaveAllocation.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/attendance/leave-allocations/user",
        produces = { "application/json" }
    )
    default ResponseEntity<LeaveAllocation> _getLeaveAllicationByUser(
        @NotNull @Parameter(name = "id", description = "", required = true) @Valid @RequestParam(value = "id", required = true) Integer id
    ) {
        return getLeaveAllicationByUser(id);
    }

    // Override this method
    default  ResponseEntity<LeaveAllocation> getLeaveAllicationByUser(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"allocated_days\" : 1.4658129805029452, \"user_id\" : 6, \"allocation_type\" : \"EACH_MONTH\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/attendance/leave-applications : Get all leave applications
     * Get all leave applications
     *
     * @return A list of leave applications (status code 200)
     */
    @Operation(
        operationId = "getLeaveApplicaitons",
        summary = "Get all leave applications",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of leave applications", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LeaveApplication.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/attendance/leave-applications",
        produces = { "application/json" }
    )
    default ResponseEntity<List<LeaveApplication>> _getLeaveApplicaitons(
        
    ) {
        return getLeaveApplicaitons();
    }

    // Override this method
    default  ResponseEntity<List<LeaveApplication>> getLeaveApplicaitons() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23\", \"reason\" : \"reason\", \"user_id\" : 6, \"id\" : 0, \"start_date\" : \"2000-01-23\", \"status\" : \"PENDING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/attendance/leave-applications/{id} : Get leave application by ID
     * Get leave application by ID
     *
     * @param id  (required)
     * @return Leave application details (status code 200)
     */
    @Operation(
        operationId = "getLeaveDetailsById",
        summary = "Get leave application by ID",
        tags = { "Attendance" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Leave application details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LeaveApplication.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/attendance/leave-applications/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<LeaveApplication> _getLeaveDetailsById(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        return getLeaveDetailsById(id);
    }

    // Override this method
    default  ResponseEntity<LeaveApplication> getLeaveDetailsById(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"end_date\" : \"2000-01-23\", \"reason\" : \"reason\", \"user_id\" : 6, \"id\" : 0, \"start_date\" : \"2000-01-23\", \"status\" : \"PENDING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
