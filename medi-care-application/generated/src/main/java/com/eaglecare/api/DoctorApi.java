/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eaglecare.api;

import java.math.BigDecimal;
import com.eaglecare.model.Doctor;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-12T00:33:25.588524200+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "Doctor", description = "Doctors management")
public interface DoctorApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/api/doctor : Creation of new doctor
     * Return the list values
     *
     * @param doctor Update an existent pet in the store (required)
     * @return successful operation (status code 200)
     *         or Invalid user id (status code 400)
     */
    @Operation(
        operationId = "createNewDoctor",
        summary = "Creation of new doctor",
        tags = { "Doctor" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Doctor.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/doctor",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Doctor> _createNewDoctor(
        @Parameter(name = "Doctor", description = "Update an existent pet in the store", required = true) @Valid @RequestBody Doctor doctor
    ) {
        return createNewDoctor(doctor);
    }

    // Override this method
    default  ResponseEntity<Doctor> createNewDoctor(Doctor doctor) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"professional_information\" : { \"qualifications\" : \"MBBS.MS\", \"years_of_experience\" : 10.6, \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"medical_license_number\" : \"8975469532\" }, \"basic_info\" : { \"role\" : { \"name\" : \"ROLE_USER\", \"description\" : \"User role\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }, \"gender\" : \"Male\", \"user_id\" : \"fb17eecf-5ec6-4c13-a5bd-5ce1451472d0\", \"last_name\" : \"Aravind\", \"employment_details\" : { \"joining_date\" : \"2024-11-05T00:00:00Z\", \"relieving_date\" : \"2024-11-05T00:00:00Z\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"payroll\" : { \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"gross_amount\" : 0.8008282, \"net_amount\" : 1.4658129, \"deductions\" : 6.0274563, \"user\" : \"user\", \"payment_date\" : \"2024-11-05T00:00:00Z\" }, \"department\" : \"CLINIC_STAFF\", \"salary\" : 18500 }, \"first_name\" : \"Sastika\" }, \"contact\" : { \"address\" : { \"country\" : \"India\", \"geo_location\" : \"India\", \"pin\" : \"624601\", \"city\" : \"Coimabtore\", \"street\" : \"121,Balaji Nagar\", \"address_category\" : \"Personal\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"state\" : \"Tamilnadu\" }, \"phone\" : \"7010192967\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"email\" : \"aravind@gmail.com\" }, \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/api/doctor/{id} : Delete Operation
     * Return the list values
     *
     * @param id User Id (required)
     * @return successful operation (status code 200)
     *         or Invalid user id (status code 400)
     */
    @Operation(
        operationId = "deleteDoctorsById",
        summary = "Delete Operation",
        tags = { "Doctor" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/api/doctor/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> _deleteDoctorsById(
        @Parameter(name = "id", description = "User Id", required = true) @PathVariable("id") String id
    ) {
        return deleteDoctorsById(id);
    }

    // Override this method
    default  ResponseEntity<String> deleteDoctorsById(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Doctor removed successfully\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/doctor : Get Doctors
     * Get doctors list by params
     *
     * @param page Page number (required)
     * @param count Data count (required)
     * @param doctorId Doctor Id (optional, default to 4598)
     * @return successful operation (status code 200)
     *         or Invalid user id (status code 400)
     */
    @Operation(
        operationId = "getDoctors",
        summary = "Get Doctors",
        tags = { "Doctor" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Doctor.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/doctor",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Doctor>> _getDoctors(
        @NotNull @Parameter(name = "page", description = "Page number", required = true) @Valid @RequestParam(value = "page", required = true, defaultValue = "0") BigDecimal page,
        @NotNull @Parameter(name = "count", description = "Data count", required = true) @Valid @RequestParam(value = "count", required = true, defaultValue = "5") BigDecimal count,
        @Parameter(name = "doctorId", description = "Doctor Id") @Valid @RequestParam(value = "doctorId", required = false, defaultValue = "4598") BigDecimal doctorId
    ) {
        return getDoctors(page, count, doctorId);
    }

    // Override this method
    default  ResponseEntity<List<Doctor>> getDoctors(BigDecimal page, BigDecimal count, BigDecimal doctorId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"professional_information\" : { \"qualifications\" : \"MBBS.MS\", \"years_of_experience\" : 10.6, \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"medical_license_number\" : \"8975469532\" }, \"basic_info\" : { \"role\" : { \"name\" : \"ROLE_USER\", \"description\" : \"User role\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }, \"gender\" : \"Male\", \"user_id\" : \"fb17eecf-5ec6-4c13-a5bd-5ce1451472d0\", \"last_name\" : \"Aravind\", \"employment_details\" : { \"joining_date\" : \"2024-11-05T00:00:00Z\", \"relieving_date\" : \"2024-11-05T00:00:00Z\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"payroll\" : { \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"gross_amount\" : 0.8008282, \"net_amount\" : 1.4658129, \"deductions\" : 6.0274563, \"user\" : \"user\", \"payment_date\" : \"2024-11-05T00:00:00Z\" }, \"department\" : \"CLINIC_STAFF\", \"salary\" : 18500 }, \"first_name\" : \"Sastika\" }, \"contact\" : { \"address\" : { \"country\" : \"India\", \"geo_location\" : \"India\", \"pin\" : \"624601\", \"city\" : \"Coimabtore\", \"street\" : \"121,Balaji Nagar\", \"address_category\" : \"Personal\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"state\" : \"Tamilnadu\" }, \"phone\" : \"7010192967\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"email\" : \"aravind@gmail.com\" }, \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/doctor/{id} : Creation of new doctor
     * Return the list values
     *
     * @param id User Id (required)
     * @return successful operation (status code 200)
     *         or Invalid user id (status code 400)
     */
    @Operation(
        operationId = "getDoctorsById",
        summary = "Creation of new doctor",
        tags = { "Doctor" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Doctor.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/doctor/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Doctor> _getDoctorsById(
        @Parameter(name = "id", description = "User Id", required = true) @PathVariable("id") String id
    ) {
        return getDoctorsById(id);
    }

    // Override this method
    default  ResponseEntity<Doctor> getDoctorsById(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"professional_information\" : { \"qualifications\" : \"MBBS.MS\", \"years_of_experience\" : 10.6, \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"medical_license_number\" : \"8975469532\" }, \"basic_info\" : { \"role\" : { \"name\" : \"ROLE_USER\", \"description\" : \"User role\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }, \"gender\" : \"Male\", \"user_id\" : \"fb17eecf-5ec6-4c13-a5bd-5ce1451472d0\", \"last_name\" : \"Aravind\", \"employment_details\" : { \"joining_date\" : \"2024-11-05T00:00:00Z\", \"relieving_date\" : \"2024-11-05T00:00:00Z\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"payroll\" : { \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"gross_amount\" : 0.8008282, \"net_amount\" : 1.4658129, \"deductions\" : 6.0274563, \"user\" : \"user\", \"payment_date\" : \"2024-11-05T00:00:00Z\" }, \"department\" : \"CLINIC_STAFF\", \"salary\" : 18500 }, \"first_name\" : \"Sastika\" }, \"contact\" : { \"address\" : { \"country\" : \"India\", \"geo_location\" : \"India\", \"pin\" : \"624601\", \"city\" : \"Coimabtore\", \"street\" : \"121,Balaji Nagar\", \"address_category\" : \"Personal\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"state\" : \"Tamilnadu\" }, \"phone\" : \"7010192967\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"email\" : \"aravind@gmail.com\" }, \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/api/doctor/{id} : Creation of new doctor
     * Return the list values
     *
     * @param id User Id (required)
     * @param doctor Update an existent pet in the store (required)
     * @return successful operation (status code 200)
     *         or Invalid user id (status code 400)
     */
    @Operation(
        operationId = "updateDoctor",
        summary = "Creation of new doctor",
        tags = { "Doctor" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Doctor.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/api/doctor/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Doctor> _updateDoctor(
        @Parameter(name = "id", description = "User Id", required = true) @PathVariable("id") String id,
        @Parameter(name = "Doctor", description = "Update an existent pet in the store", required = true) @Valid @RequestBody Doctor doctor
    ) {
        return updateDoctor(id, doctor);
    }

    // Override this method
    default  ResponseEntity<Doctor> updateDoctor(String id, Doctor doctor) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"professional_information\" : { \"qualifications\" : \"MBBS.MS\", \"years_of_experience\" : 10.6, \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"medical_license_number\" : \"8975469532\" }, \"basic_info\" : { \"role\" : { \"name\" : \"ROLE_USER\", \"description\" : \"User role\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }, \"gender\" : \"Male\", \"user_id\" : \"fb17eecf-5ec6-4c13-a5bd-5ce1451472d0\", \"last_name\" : \"Aravind\", \"employment_details\" : { \"joining_date\" : \"2024-11-05T00:00:00Z\", \"relieving_date\" : \"2024-11-05T00:00:00Z\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"payroll\" : { \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"gross_amount\" : 0.8008282, \"net_amount\" : 1.4658129, \"deductions\" : 6.0274563, \"user\" : \"user\", \"payment_date\" : \"2024-11-05T00:00:00Z\" }, \"department\" : \"CLINIC_STAFF\", \"salary\" : 18500 }, \"first_name\" : \"Sastika\" }, \"contact\" : { \"address\" : { \"country\" : \"India\", \"geo_location\" : \"India\", \"pin\" : \"624601\", \"city\" : \"Coimabtore\", \"street\" : \"121,Balaji Nagar\", \"address_category\" : \"Personal\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"state\" : \"Tamilnadu\" }, \"phone\" : \"7010192967\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"email\" : \"aravind@gmail.com\" }, \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
