/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.medicare.api;

import java.math.BigDecimal;
import java.util.Date;
import org.springframework.format.annotation.DateTimeFormat;
import com.medicare.model.Invoices;
import com.medicare.model.PayRoll;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-12T00:43:21.532621800+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "Invoices", description = "Operations about Invoices")
public interface InvoicesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/api/invoices : Creation of new invoices
     * Return the list values
     *
     * @param invoices Payroll creation Invoices (required)
     * @return successful operation (status code 200)
     *         or Invalid Payroll (status code 400)
     */
    @Operation(
        operationId = "createInvoices",
        summary = "Creation of new invoices",
        tags = { "Invoices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Invoices.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Payroll")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/invoices",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Invoices> _createInvoices(
        @Parameter(name = "Invoices", description = "Payroll creation Invoices", required = true) @Valid @RequestBody Invoices invoices
    ) {
        return createInvoices(invoices);
    }

    // Override this method
    default  ResponseEntity<Invoices> createInvoices(Invoices invoices) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"notes\" : \"invoice for the employees salary\", \"reference_id\" : 158, \"total_amount\" : 78965, \"receiver_name\" : \"aravind\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"deduction_summary\" : [ { \"reason\" : \"TDS\", \"amount\" : 1800.3 }, { \"reason\" : \"TDS\", \"amount\" : 1800.3 } ], \"deductions\" : 1596.32, \"invoice_reference_type\" : \"PAYROLL\", \"invoice_date\" : \"2024-11-05T00:00:00Z\", \"status\" : \"UN_PAID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/api/invoices/{id} : Delete Invoices
     * Delete Invoices by id
     *
     * @param id Invoices Id (required)
     * @return successful operation (status code 200)
     *         or Invalid Invoices id (status code 400)
     */
    @Operation(
        operationId = "deleteInvoicesById",
        summary = "Delete Invoices",
        tags = { "Invoices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Invoices id")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/api/invoices/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> _deleteInvoicesById(
        @Parameter(name = "id", description = "Invoices Id", required = true) @PathVariable("id") String id
    ) {
        return deleteInvoicesById(id);
    }

    // Override this method
    default  ResponseEntity<String> deleteInvoicesById(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Invoices removed successfully\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/invoices : Get Invoices
     * Get Invoices list by params
     *
     * @param page Page number (required)
     * @param count Data count (required)
     * @param month Month of invoice (optional)
     * @param year invoice year (optional, default to 45689)
     * @return successful operation (status code 200)
     *         or Invalid user id (status code 400)
     */
    @Operation(
        operationId = "getInvoices",
        summary = "Get Invoices",
        tags = { "Invoices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Invoices.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/invoices",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Invoices>> _getInvoices(
        @NotNull @Parameter(name = "page", description = "Page number", required = true) @Valid @RequestParam(value = "page", required = true, defaultValue = "0") BigDecimal page,
        @NotNull @Parameter(name = "count", description = "Data count", required = true) @Valid @RequestParam(value = "count", required = true, defaultValue = "5") BigDecimal count,
        @Parameter(name = "month", description = "Month of invoice") @Valid @RequestParam(value = "month", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date month,
        @Parameter(name = "year", description = "invoice year") @Valid @RequestParam(value = "year", required = false, defaultValue = "45689") Integer year
    ) {
        return getInvoices(page, count, month, year);
    }

    // Override this method
    default  ResponseEntity<List<Invoices>> getInvoices(BigDecimal page, BigDecimal count, Date month, Integer year) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"notes\" : \"invoice for the employees salary\", \"reference_id\" : 158, \"total_amount\" : 78965, \"receiver_name\" : \"aravind\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"deduction_summary\" : [ { \"reason\" : \"TDS\", \"amount\" : 1800.3 }, { \"reason\" : \"TDS\", \"amount\" : 1800.3 } ], \"deductions\" : 1596.32, \"invoice_reference_type\" : \"PAYROLL\", \"invoice_date\" : \"2024-11-05T00:00:00Z\", \"status\" : \"UN_PAID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/invoices/{id} : Get Invoices by id
     * Appoinment details
     *
     * @param id Invoices Id (required)
     * @return successful operation (status code 200)
     *         or Invalid Invoices id (status code 400)
     */
    @Operation(
        operationId = "getInvoicesById",
        summary = "Get Invoices by id",
        tags = { "Invoices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PayRoll.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Invoices id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/invoices/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<PayRoll> _getInvoicesById(
        @Parameter(name = "id", description = "Invoices Id", required = true) @PathVariable("id") String id
    ) {
        return getInvoicesById(id);
    }

    // Override this method
    default  ResponseEntity<PayRoll> getInvoicesById(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"gross_amount\" : 0.8008282, \"net_amount\" : 1.4658129, \"deductions\" : 6.0274563, \"payment_date\" : \"2024-11-05T00:00:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/api/invoices/{id} : Update Invoices
     * Update Invoices data
     *
     * @param id PayRoll Id (required)
     * @param invoices Update an existent Invoices (required)
     * @return successful operation (status code 200)
     *         or Invalid Invoices id (status code 400)
     */
    @Operation(
        operationId = "updateInvoices",
        summary = "Update Invoices",
        tags = { "Invoices" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Invoices.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Invoices id")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/api/invoices/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Invoices> _updateInvoices(
        @Parameter(name = "id", description = "PayRoll Id", required = true) @PathVariable("id") String id,
        @Parameter(name = "Invoices", description = "Update an existent Invoices", required = true) @Valid @RequestBody Invoices invoices
    ) {
        return updateInvoices(id, invoices);
    }

    // Override this method
    default  ResponseEntity<Invoices> updateInvoices(String id, Invoices invoices) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"notes\" : \"invoice for the employees salary\", \"reference_id\" : 158, \"total_amount\" : 78965, \"receiver_name\" : \"aravind\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"deduction_summary\" : [ { \"reason\" : \"TDS\", \"amount\" : 1800.3 }, { \"reason\" : \"TDS\", \"amount\" : 1800.3 } ], \"deductions\" : 1596.32, \"invoice_reference_type\" : \"PAYROLL\", \"invoice_date\" : \"2024-11-05T00:00:00Z\", \"status\" : \"UN_PAID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
