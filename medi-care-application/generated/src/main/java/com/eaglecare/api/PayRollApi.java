/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eaglecare.api;

import java.math.BigDecimal;
import com.eaglecare.model.PayRoll;
import com.eaglecare.model.PayRollGenerationHistory;
import com.eaglecare.model.PayRollSummary;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-12T00:33:25.588524200+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "PayRoll", description = "Operations about Payroll")
public interface PayRollApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/api/payroll/generate : Creation of new Payroll History
     * Return the list values
     *
     * @param payRollGenerationHistory Payroll creation payload (required)
     * @return successful operation (status code 200)
     *         or Invalid Payroll (status code 400)
     */
    @Operation(
        operationId = "createPayRollGenerationHistory",
        summary = "Creation of new Payroll History",
        tags = { "PayRoll" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PayRollGenerationHistory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Payroll")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/payroll/generate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PayRollGenerationHistory> _createPayRollGenerationHistory(
        @Parameter(name = "PayRollGenerationHistory", description = "Payroll creation payload", required = true) @Valid @RequestBody PayRollGenerationHistory payRollGenerationHistory
    ) {
        return createPayRollGenerationHistory(payRollGenerationHistory);
    }

    // Override this method
    default  ResponseEntity<PayRollGenerationHistory> createPayRollGenerationHistory(PayRollGenerationHistory payRollGenerationHistory) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"net_salary\" : 14899.9, \"leave\" : 10, \"cross_salary\" : 15000.63, \"emp_name\" : \"aravind\", \"deduction_summary\" : [ { \"reason\" : \"TDS\", \"amount\" : 1800.3 }, { \"reason\" : \"TDS\", \"amount\" : 1800.3 } ], \"deductions\" : 1596.32, \"emp_id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"status\" : \"APPROVED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/api/payroll : Creation of new Payroll
     * Return the list values
     *
     * @param payRoll Payroll creation payload (required)
     * @return successful operation (status code 200)
     *         or Invalid Payroll (status code 400)
     */
    @Operation(
        operationId = "createPayrollForEmployee",
        summary = "Creation of new Payroll",
        tags = { "PayRoll" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PayRoll.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Payroll")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/payroll",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PayRoll> _createPayrollForEmployee(
        @Parameter(name = "PayRoll", description = "Payroll creation payload", required = true) @Valid @RequestBody PayRoll payRoll
    ) {
        return createPayrollForEmployee(payRoll);
    }

    // Override this method
    default  ResponseEntity<PayRoll> createPayrollForEmployee(PayRoll payRoll) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"gross_amount\" : 0.8008282, \"net_amount\" : 1.4658129, \"deductions\" : 6.0274563, \"user\" : \"user\", \"payment_date\" : \"2024-11-05T00:00:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/api/payroll/{id} : Delete PayRoll
     * Delete PayRoll by id
     *
     * @param id PayRoll Id (required)
     * @return successful operation (status code 200)
     *         or Invalid PayRoll id (status code 400)
     */
    @Operation(
        operationId = "deletePayRollById",
        summary = "Delete PayRoll",
        tags = { "PayRoll" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid PayRoll id")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/api/payroll/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> _deletePayRollById(
        @Parameter(name = "id", description = "PayRoll Id", required = true) @PathVariable("id") String id
    ) {
        return deletePayRollById(id);
    }

    // Override this method
    default  ResponseEntity<String> deletePayRollById(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"PayRoll removed successfully\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/payroll/generate : Payroll generation
     * Payroll generation
     *
     * @param month Payroll month (required)
     * @param year Payroll year (optional, default to available)
     * @return successful operation (status code 200)
     *         or Invalid request (status code 400)
     */
    @Operation(
        operationId = "generatePayRollForEmployees",
        summary = "Payroll generation",
        tags = { "PayRoll" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PayRollGenerationHistory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/payroll/generate",
        produces = { "application/json" }
    )
    default ResponseEntity<PayRollGenerationHistory> _generatePayRollForEmployees(
        @NotNull @Parameter(name = "month", description = "Payroll month", required = true) @Valid @RequestParam(value = "month", required = true, defaultValue = "available") String month,
        @Parameter(name = "year", description = "Payroll year") @Valid @RequestParam(value = "year", required = false, defaultValue = "available") String year
    ) {
        return generatePayRollForEmployees(month, year);
    }

    // Override this method
    default  ResponseEntity<PayRollGenerationHistory> generatePayRollForEmployees(String month, String year) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"net_salary\" : 14899.9, \"leave\" : 10, \"cross_salary\" : 15000.63, \"emp_name\" : \"aravind\", \"deduction_summary\" : [ { \"reason\" : \"TDS\", \"amount\" : 1800.3 }, { \"reason\" : \"TDS\", \"amount\" : 1800.3 } ], \"deductions\" : 1596.32, \"emp_id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"status\" : \"APPROVED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/payroll/by-employee/{id} : Get PayRoll by employee id
     * Appoinment details
     *
     * @param id Employee Id (required)
     * @return successful operation (status code 200)
     *         or Invalid employee id (status code 400)
     */
    @Operation(
        operationId = "getPayRollByEmployeeId",
        summary = "Get PayRoll by employee id",
        tags = { "PayRoll" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PayRoll.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid employee id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/payroll/by-employee/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<PayRoll> _getPayRollByEmployeeId(
        @Parameter(name = "id", description = "Employee Id", required = true) @PathVariable("id") String id
    ) {
        return getPayRollByEmployeeId(id);
    }

    // Override this method
    default  ResponseEntity<PayRoll> getPayRollByEmployeeId(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"gross_amount\" : 0.8008282, \"net_amount\" : 1.4658129, \"deductions\" : 6.0274563, \"user\" : \"user\", \"payment_date\" : \"2024-11-05T00:00:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/payroll/{id} : Get PayRoll by id
     * Appoinment details
     *
     * @param id PayRoll Id (required)
     * @return successful operation (status code 200)
     *         or Invalid Appointment id (status code 400)
     */
    @Operation(
        operationId = "getPayRollById",
        summary = "Get PayRoll by id",
        tags = { "PayRoll" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PayRoll.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Appointment id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/payroll/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<PayRoll> _getPayRollById(
        @Parameter(name = "id", description = "PayRoll Id", required = true) @PathVariable("id") String id
    ) {
        return getPayRollById(id);
    }

    // Override this method
    default  ResponseEntity<PayRoll> getPayRollById(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"gross_amount\" : 0.8008282, \"net_amount\" : 1.4658129, \"deductions\" : 6.0274563, \"user\" : \"user\", \"payment_date\" : \"2024-11-05T00:00:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/payroll-leave-summary : Get Leave summary for all employees
     * Leave summary details
     *
     * @param id Hospital Id (required)
     * @param month Month (required)
     * @param year Year (required)
     * @param from From Date (required)
     * @param to To Date (required)
     * @return successful operation (status code 200)
     *         or Invalid Appointment id (status code 400)
     */
    @Operation(
        operationId = "getPayRollLeaveSummaryDetails",
        summary = "Get Leave summary for all employees",
        tags = { "PayRoll" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PayRollSummary.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Appointment id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/payroll-leave-summary",
        produces = { "application/json" }
    )
    default ResponseEntity<PayRollSummary> _getPayRollLeaveSummaryDetails(
        @NotNull @Parameter(name = "id", description = "Hospital Id", required = true) @Valid @RequestParam(value = "id", required = true, defaultValue = "available") String id,
        @NotNull @Parameter(name = "month", description = "Month", required = true) @Valid @RequestParam(value = "month", required = true) BigDecimal month,
        @NotNull @Parameter(name = "year", description = "Year", required = true) @Valid @RequestParam(value = "year", required = true) BigDecimal year,
        @NotNull @Parameter(name = "from", description = "From Date", required = true) @Valid @RequestParam(value = "from", required = true, defaultValue = "available") String from,
        @NotNull @Parameter(name = "to", description = "To Date", required = true) @Valid @RequestParam(value = "to", required = true, defaultValue = "available") String to
    ) {
        return getPayRollLeaveSummaryDetails(id, month, year, from, to);
    }

    // Override this method
    default  ResponseEntity<PayRollSummary> getPayRollLeaveSummaryDetails(String id, BigDecimal month, BigDecimal year, String from, String to) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total_amount\" : 10, \"salary_per_month\" : 12563.58, \"gradWise\" : [ { \"role\" : \"role_name\", \"count\" : 10 }, { \"role\" : \"role_name\", \"count\" : 10 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/payroll-dash-summary : Get PayRoll by id
     * Appoinment details
     *
     * @param id Hospital Id (required)
     * @return successful operation (status code 200)
     *         or Invalid Appointment id (status code 400)
     */
    @Operation(
        operationId = "getPayRollSummaryForDash",
        summary = "Get PayRoll by id",
        tags = { "PayRoll" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PayRollSummary.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Appointment id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/payroll-dash-summary",
        produces = { "application/json" }
    )
    default ResponseEntity<PayRollSummary> _getPayRollSummaryForDash(
        @NotNull @Parameter(name = "id", description = "Hospital Id", required = true) @Valid @RequestParam(value = "id", required = true, defaultValue = "available") String id
    ) {
        return getPayRollSummaryForDash(id);
    }

    // Override this method
    default  ResponseEntity<PayRollSummary> getPayRollSummaryForDash(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total_amount\" : 10, \"salary_per_month\" : 12563.58, \"gradWise\" : [ { \"role\" : \"role_name\", \"count\" : 10 }, { \"role\" : \"role_name\", \"count\" : 10 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/api/payroll/{id} : Update PayRoll
     * Update PayRoll data
     *
     * @param id PayRoll Id (required)
     * @param payRoll Update an existent PayRoll (required)
     * @return successful operation (status code 200)
     *         or Invalid Appointment id (status code 400)
     */
    @Operation(
        operationId = "updatePayRoll",
        summary = "Update PayRoll",
        tags = { "PayRoll" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PayRoll.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Appointment id")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/api/payroll/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PayRoll> _updatePayRoll(
        @Parameter(name = "id", description = "PayRoll Id", required = true) @PathVariable("id") String id,
        @Parameter(name = "PayRoll", description = "Update an existent PayRoll", required = true) @Valid @RequestBody PayRoll payRoll
    ) {
        return updatePayRoll(id, payRoll);
    }

    // Override this method
    default  ResponseEntity<PayRoll> updatePayRoll(String id, PayRoll payRoll) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"gross_amount\" : 0.8008282, \"net_amount\" : 1.4658129, \"deductions\" : 6.0274563, \"user\" : \"user\", \"payment_date\" : \"2024-11-05T00:00:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
