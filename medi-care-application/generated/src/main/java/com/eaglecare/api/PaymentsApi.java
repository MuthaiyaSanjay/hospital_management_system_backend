/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eaglecare.api;

import java.math.BigDecimal;
import java.util.List;
import com.eaglecare.model.Payments;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-12T00:33:25.588524200+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "Payments", description = "Operations about Payments")
public interface PaymentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PATCH /v1/api/payments : Creation of new Payments
     * Return the list values
     *
     * @param payments Payroll patch creation payments (required)
     * @return successful operation (status code 200)
     *         or Invalid Payments (status code 400)
     */
    @Operation(
        operationId = "createPatchPayments",
        summary = "Creation of new Payments",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Payments.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Payments")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/api/payments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Payments> _createPatchPayments(
        @Parameter(name = "Payments", description = "Payroll patch creation payments", required = true) @Valid @RequestBody List<Payments> payments
    ) {
        return createPatchPayments(payments);
    }

    // Override this method
    default  ResponseEntity<Payments> createPatchPayments(List<Payments> payments) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 78965, \"invoice_id\" : 158, \"payment_due_date\" : \"2024-11-05T00:00:00Z\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"payment_date\" : \"2024-11-05T00:00:00Z\", \"status\" : \"UN_PAID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/api/payments : Creation of new Payments
     * Return the list values
     *
     * @param payments Payroll creation Payments (required)
     * @return successful operation (status code 200)
     *         or Invalid Payments (status code 400)
     */
    @Operation(
        operationId = "createPayments",
        summary = "Creation of new Payments",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Payments.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Payments")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/payments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Payments> _createPayments(
        @Parameter(name = "Payments", description = "Payroll creation Payments", required = true) @Valid @RequestBody Payments payments
    ) {
        return createPayments(payments);
    }

    // Override this method
    default  ResponseEntity<Payments> createPayments(Payments payments) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 78965, \"invoice_id\" : 158, \"payment_due_date\" : \"2024-11-05T00:00:00Z\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"payment_date\" : \"2024-11-05T00:00:00Z\", \"status\" : \"UN_PAID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/api/payments/{id} : Delete Payments
     * Delete Payments by id
     *
     * @param id Payments Id (required)
     * @return successful operation (status code 200)
     *         or Invalid Payments id (status code 400)
     */
    @Operation(
        operationId = "deletePaymentsById",
        summary = "Delete Payments",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Payments id")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/api/payments/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> _deletePaymentsById(
        @Parameter(name = "id", description = "Payments Id", required = true) @PathVariable("id") String id
    ) {
        return deletePaymentsById(id);
    }

    // Override this method
    default  ResponseEntity<String> deletePaymentsById(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Payments removed successfully\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/payments : Get Payments
     * Get Payments list by params
     *
     * @param page Page number (required)
     * @param count Data count (required)
     * @return successful operation (status code 200)
     *         or Invalid user id (status code 400)
     */
    @Operation(
        operationId = "getPayments",
        summary = "Get Payments",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Payments.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/payments",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Payments>> _getPayments(
        @NotNull @Parameter(name = "page", description = "Page number", required = true) @Valid @RequestParam(value = "page", required = true, defaultValue = "0") BigDecimal page,
        @NotNull @Parameter(name = "count", description = "Data count", required = true) @Valid @RequestParam(value = "count", required = true, defaultValue = "5") BigDecimal count
    ) {
        return getPayments(page, count);
    }

    // Override this method
    default  ResponseEntity<List<Payments>> getPayments(BigDecimal page, BigDecimal count) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 78965, \"invoice_id\" : 158, \"payment_due_date\" : \"2024-11-05T00:00:00Z\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"payment_date\" : \"2024-11-05T00:00:00Z\", \"status\" : \"UN_PAID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/payments/{id} : Get Payments by id
     * Payments details
     *
     * @param id Invoices Id (required)
     * @return successful operation (status code 200)
     *         or Invalid Payments id (status code 400)
     */
    @Operation(
        operationId = "getPaymentsById",
        summary = "Get Payments by id",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Payments.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Payments id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/payments/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Payments> _getPaymentsById(
        @Parameter(name = "id", description = "Invoices Id", required = true) @PathVariable("id") String id
    ) {
        return getPaymentsById(id);
    }

    // Override this method
    default  ResponseEntity<Payments> getPaymentsById(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 78965, \"invoice_id\" : 158, \"payment_due_date\" : \"2024-11-05T00:00:00Z\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"payment_date\" : \"2024-11-05T00:00:00Z\", \"status\" : \"UN_PAID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/payments/by-invoice : Get Payments by invoice id
     * Get invoice list by params
     *
     * @param invoiceId INvoice number (required)
     * @return successful operation (status code 200)
     *         or Invalid user id (status code 400)
     */
    @Operation(
        operationId = "getPaymentsByInvoice",
        summary = "Get Payments by invoice id",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Payments.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/payments/by-invoice",
        produces = { "application/json" }
    )
    default ResponseEntity<Payments> _getPaymentsByInvoice(
        @NotNull @Parameter(name = "invoice id", description = "INvoice number", required = true) @Valid @RequestParam(value = "invoice id", required = true, defaultValue = "0") BigDecimal invoiceId
    ) {
        return getPaymentsByInvoice(invoiceId);
    }

    // Override this method
    default  ResponseEntity<Payments> getPaymentsByInvoice(BigDecimal invoiceId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 78965, \"invoice_id\" : 158, \"payment_due_date\" : \"2024-11-05T00:00:00Z\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"payment_date\" : \"2024-11-05T00:00:00Z\", \"status\" : \"UN_PAID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/api/payments/{id} : Update Payments
     * Update Payments data
     *
     * @param id Payments Id (required)
     * @param payments Update an existent Payments (required)
     * @return successful operation (status code 200)
     *         or Invalid Payments id (status code 400)
     */
    @Operation(
        operationId = "updatePayments",
        summary = "Update Payments",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Payments.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Payments id")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/api/payments/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Payments> _updatePayments(
        @Parameter(name = "id", description = "Payments Id", required = true) @PathVariable("id") String id,
        @Parameter(name = "Payments", description = "Update an existent Payments", required = true) @Valid @RequestBody Payments payments
    ) {
        return updatePayments(id, payments);
    }

    // Override this method
    default  ResponseEntity<Payments> updatePayments(String id, Payments payments) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 78965, \"invoice_id\" : 158, \"payment_due_date\" : \"2024-11-05T00:00:00Z\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\", \"payment_date\" : \"2024-11-05T00:00:00Z\", \"status\" : \"UN_PAID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
