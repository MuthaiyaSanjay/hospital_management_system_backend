/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.medicare.api;

import java.math.BigDecimal;
import com.medicare.model.Role;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-12T00:43:21.532621800+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "Role", description = "Operations about Role")
public interface RoleApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/api/role : Creation of new Role
     * Return the list values
     *
     * @param role Role creation payload (required)
     * @return successful operation (status code 200)
     *         or Invalid Role id (status code 400)
     */
    @Operation(
        operationId = "createNewRole",
        summary = "Creation of new Role",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Role id")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/api/role",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Role> _createNewRole(
        @Parameter(name = "Role", description = "Role creation payload", required = true) @Valid @RequestBody Role role
    ) {
        return createNewRole(role);
    }

    // Override this method
    default  ResponseEntity<Role> createNewRole(Role role) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"ROLE_USER\", \"description\" : \"User role\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/api/role/{id} : Delete Operation
     * Delete Role account
     *
     * @param id Role Id (required)
     * @return successful operation (status code 200)
     *         or Invalid Role id (status code 400)
     */
    @Operation(
        operationId = "deleteRoleById",
        summary = "Delete Operation",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Role id")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/api/role/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<String> _deleteRoleById(
        @Parameter(name = "id", description = "Role Id", required = true) @PathVariable("id") String id
    ) {
        return deleteRoleById(id);
    }

    // Override this method
    default  ResponseEntity<String> deleteRoleById(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"User removed successfully\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/role/{id} : Creation of new Role
     * Return the list values
     *
     * @param id Role Id (required)
     * @return successful operation (status code 200)
     *         or Invalid user id (status code 400)
     */
    @Operation(
        operationId = "getRoleById",
        summary = "Creation of new Role",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid user id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/role/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Role> _getRoleById(
        @Parameter(name = "id", description = "Role Id", required = true) @PathVariable("id") String id
    ) {
        return getRoleById(id);
    }

    // Override this method
    default  ResponseEntity<Role> getRoleById(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"ROLE_USER\", \"description\" : \"User role\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/api/role : Get Roles
     * Get Users list by params
     *
     * @param page Page number (required)
     * @param count Data count (required)
     * @return successful operation (status code 200)
     *         or Invalid Role id (status code 400)
     */
    @Operation(
        operationId = "getRoles",
        summary = "Get Roles",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Role id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/api/role",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Role>> _getRoles(
        @NotNull @Parameter(name = "page", description = "Page number", required = true) @Valid @RequestParam(value = "page", required = true, defaultValue = "0") BigDecimal page,
        @NotNull @Parameter(name = "count", description = "Data count", required = true) @Valid @RequestParam(value = "count", required = true, defaultValue = "5") BigDecimal count
    ) {
        return getRoles(page, count);
    }

    // Override this method
    default  ResponseEntity<List<Role>> getRoles(BigDecimal page, BigDecimal count) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"ROLE_USER\", \"description\" : \"User role\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/api/role/{id} : Update Role
     * Return the list values
     *
     * @param id Role Id (required)
     * @param role Update an existent Role (required)
     * @return successful operation (status code 200)
     *         or Invalid Role id (status code 400)
     */
    @Operation(
        operationId = "updateRole",
        summary = "Update Role",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Role id")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/api/role/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Role> _updateRole(
        @Parameter(name = "id", description = "Role Id", required = true) @PathVariable("id") String id,
        @Parameter(name = "Role", description = "Update an existent Role", required = true) @Valid @RequestBody Role role
    ) {
        return updateRole(id, role);
    }

    // Override this method
    default  ResponseEntity<Role> updateRole(String id, Role role) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"ROLE_USER\", \"description\" : \"User role\", \"id\" : \"4acd0b30-0ac1-4d0f-938b-c7b86d804375\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
